{"CLs":[{"__type":"IST","EID":"53b5cba8-b228-4257-975d-7e5b9cc13539","H":573.20000000000016,"TXT":"IF MB_Busy OR MB_Error THEN\u000d\u000a\u0009MB_Execute := FALSE;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Clear execution flag for 'NX_ModbusRtuRead' instance when Busy or Error\u000d\u000aEND_IF;\u000d\u000aIF MB_Write_Busy OR MB_Write_Error THEN\u000d\u000a\u0009MB_Reset_Execute := FALSE;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Clear execution flag for 'NX_ModbusRtuWrite' instance when Busy or Error\u000d\u000aEND_IF;\u000d\u000aIF Reset_ActiveEnergyValues_Done AND (NOT Reset_ActiveEnergyValues) THEN\u0009\u0009\/\/ If we have performed values reset AND reset request is now FALSE\u000d\u000a\u0009Reset_ActiveEnergyValues_Done := FALSE;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ then clear we have performed values reset flag.\u000d\u000aEND_IF;\u000d\u000a\u000d\u000aCASE State OF\u000d\u000a\u00090:\u0009\u0009IF Execute THEN\u000d\u000a\u0009\u0009\u0009\u0009Busy := TRUE;\u000d\u000a\u0009\u0009\u0009\u0009State := 1;\u000d\u000a\u0009\u0009\u0009ELSE\u000d\u000a\u0009\u0009\u0009\u0009Busy := FALSE;\u000d\u000a\u0009\u0009\u0009\u0009Active := FALSE;\u000d\u000a\u0009\u0009\u0009\u0009Error := FALSE;\u000d\u000a\u0009\u0009\u0009END_IF;\u000d\u000a\u0009\u0009\u0009CycleComplete := FALSE;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Set 'CycleComplete' FALSE 1 cycle after it was set TRUE in state 10 or 12\u000d\u000a\u000d\u000a\u00091:\u0009\u0009MB_ReadCmd.Fun := _MDB_READ_HOLDING_REGISTERS;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Step 1 - Read addresses 0x0000 to 0x0019\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadAdr := 0;\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadSize := 26;\u0009\u000d\u000a\u0009\u0009\u0009MB_ReadOption.TimeOut := 10;\u000d\u000a\u0009\u0009\u0009MB_Execute := TRUE;\u000d\u000a\u0009\u0009\u0009State := 2;\u000d\u000a\u000d\u000a\u00092:\u0009\u0009IF MB_Done THEN\u000d\u000a\u0009\u0009\u0009\u0009Error := FALSE;\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.Voltage1_V := TO_REAL((WORD_TO_UDINT(MB_ReadData[0])*65536)+WORD_TO_UDINT(MB_ReadData[1])) \/ 10;\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.Voltage2_V := TO_REAL((WORD_TO_UDINT(MB_ReadData[2])*65536)+WORD_TO_UDINT(MB_ReadData[3])) \/ 10;\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.Voltage3_V := TO_REAL((WORD_TO_UDINT(MB_ReadData[4])*65536)+WORD_TO_UDINT(MB_ReadData[5])) \/ 10;\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.Current1_A := TO_REAL((WORD_TO_UDINT(MB_ReadData[6])*65536)+WORD_TO_UDINT(MB_ReadData[7])) \/ 1000;\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.Current2_A := TO_REAL((WORD_TO_UDINT(MB_ReadData[8])*65536)+WORD_TO_UDINT(MB_ReadData[9])) \/ 1000;\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.Current2_A := TO_REAL((WORD_TO_UDINT(MB_ReadData[10])*65536)+WORD_TO_UDINT(MB_ReadData[11])) \/ 1000;\u000d\u000a\u0009\u000d\u000a\u0009\u0009\u0009\u0009\/\/ If power factor value is negative, then this is represented in 2's complement by the KM-N2\u000d\u000a\u0009\u0009\u0009\u0009tempDWORD := UDINT_TO_DWORD((WORD_TO_UDINT(MB_ReadData[12])*65536)+WORD_TO_UDINT(MB_ReadData[13]));\u000d\u000a\u0009\u0009\u0009\u0009IF tempDWORD < 16#80000000 THEN RcvDat.PowerFactor := TO_REAL(tempDWORD) \/ 100; ELSE RcvDat.PowerFactor := (Neg(TO_REAL(NOT(tempDWORD)))-1) \/ 100; END_IF;\u000d\u000a\u0009\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.Frequency_Hz := TO_REAL((WORD_TO_UDINT(MB_ReadData[14])*65536)+WORD_TO_UDINT(MB_ReadData[15])) \/ 10;\u000d\u000a\u0009\u000d\u000a\u0009\u0009\u0009\u0009\/\/ If active power value is negative, then this is represented in 2's complement by the KM-N2\u000d\u000a\u0009\u0009\u0009\u0009tempDWORD := UDINT_TO_DWORD((WORD_TO_UDINT(MB_ReadData[16])*65536)+WORD_TO_UDINT(MB_ReadData[17]));\u000d\u000a\u0009\u0009\u0009\u0009IF tempDWORD < 16#80000000 THEN RcvDat.ActivePower_W := TO_REAL(tempDWORD) \/ 10; ELSE RcvDat.ActivePower_W := (Neg(TO_REAL(NOT(tempDWORD)))-1) \/ 10; END_IF;\u000d\u000a\u000d\u000a\u0009\u0009\u0009\u0009\/\/ If reactive power value is negative, then this is represented in 2's complement by the KM-N2\u000d\u000a\u0009\u0009\u0009\u0009tempDWORD := UDINT_TO_DWORD((WORD_TO_UDINT(MB_ReadData[18])*65536)+WORD_TO_UDINT(MB_ReadData[19]));\u000d\u000a\u0009\u0009\u0009\u0009IF tempDWORD < 16#80000000 THEN RcvDat.ReactivePower_Var := TO_REAL(tempDWORD) \/ 10; ELSE RcvDat.ReactivePower_Var := (Neg(TO_REAL(NOT(tempDWORD)))-1) \/ 10; END_IF;\u000d\u000a\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.VoltageV1toV2_V := TO_REAL((WORD_TO_UDINT(MB_ReadData[20])*65536)+WORD_TO_UDINT(MB_ReadData[21])) \/ 10;\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.VoltageV1toV3_V := TO_REAL((WORD_TO_UDINT(MB_ReadData[22])*65536)+WORD_TO_UDINT(MB_ReadData[23])) \/ 10;\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.VoltageV2toV3_V := TO_REAL((WORD_TO_UDINT(MB_ReadData[24])*65536)+WORD_TO_UDINT(MB_ReadData[25])) \/ 10;\u000d\u000a\u0009\u0009\u0009\u0009State := 3;\u000d\u000a\u0009\u0009\u0009ELSIF MB_Error THEN\u000d\u000a\u0009\u0009\u0009\u0009State := 20;\u000d\u000a\u0009\u0009\u0009END_IF;\u000d\u000a\u0009\u000d\u000a\u00093:\u0009\u0009MB_ReadCmd.Fun := _MDB_READ_HOLDING_REGISTERS;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Step 2 - Read addresses 0x0200 to 0x0211\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadAdr := 512;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ 512 = 0x200\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadSize :=18;\u000d\u000a\u0009\u0009\u0009MB_ReadOption.TimeOut := 10;\u000d\u000a\u0009\u0009\u0009MB_Execute := TRUE;\u000d\u000a\u0009\u0009\u0009State := 4;\u000d\u000a\u000d\u000a\u00094:\u0009\u0009IF MB_Done THEN\u0009\u0009\u0009\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.ActiveEnergy_Wh := (WORD_TO_UDINT(MB_ReadData[0])*65536)+WORD_TO_UDINT(MB_ReadData[1]);\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.ReactiveEnergy_Varh := (WORD_TO_UDINT(MB_ReadData[4])*65536)+WORD_TO_UDINT(MB_ReadData[5]);\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.CumulativeTotalReactivePower_Varh := (WORD_TO_UDINT(MB_ReadData[8])*65536)+WORD_TO_UDINT(MB_ReadData[9]);\u0009\u0009\u0009\u000d\u000a\u0009\u0009\u0009\u0009State := 5;\u000d\u000a\u0009\u0009\u0009ELSIF MB_Error THEN\u000d\u000a\u0009\u0009\u0009\u0009State := 20;\u000d\u000a\u0009\u0009\u0009END_IF;\u000d\u000a\u000d\u000a\u00095:\u0009\u0009MB_ReadCmd.Fun := _MDB_READ_HOLDING_REGISTERS;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Step 3 - Read addresses 0x0220 to 0x0231\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadAdr := 544;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ 544 = 0x220\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadSize :=18;\u000d\u000a\u0009\u0009\u0009MB_ReadOption.TimeOut := 10;\u000d\u000a\u0009\u0009\u0009MB_Execute := TRUE;\u000d\u000a\u0009\u0009\u0009State := 6;\u000d\u000a\u0009\u0009\u000d\u000a\u00096:\u0009\u0009IF MB_Done THEN\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.ActiveEnergy_kWh := (WORD_TO_UDINT(MB_ReadData[0])*65536)+WORD_TO_UDINT(MB_ReadData[1]);\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.ReactiveEnergy_kVarh := (WORD_TO_UDINT(MB_ReadData[4])*65536)+WORD_TO_UDINT(MB_ReadData[5]);\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.CumulativeTotalReactivePower_kVarh := (WORD_TO_UDINT(MB_ReadData[8])*65536)+WORD_TO_UDINT(MB_ReadData[9]);\u0009\u0009\u000d\u000a\u0009\u0009\u0009\u0009State := 7;\u000d\u000a\u0009\u0009\u0009ELSIF MB_Error THEN\u000d\u000a\u0009\u0009\u0009\u0009State := 20;\u000d\u000a\u0009\u0009\u0009END_IF;\u000d\u000a\u0009\u0009\u000d\u000a\u00097:\u0009\u0009MB_ReadCmd.Fun := _MDB_READ_HOLDING_REGISTERS;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Step 4 - Read addresses 0x0240 to 0x0251\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadAdr := 576;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ 576 = 0x240\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadSize :=18;\u000d\u000a\u0009\u0009\u0009MB_ReadOption.TimeOut := 10;\u000d\u000a\u0009\u0009\u0009MB_Execute := TRUE;\u000d\u000a\u0009\u0009\u0009State := 8;\u000d\u000a\u000d\u000a\u00098:\u0009\u0009IF MB_Done THEN\u0009\u0009\u0009\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.ActiveEnergy_Resettable_Wh := (WORD_TO_UDINT(MB_ReadData[0])*65536)+WORD_TO_UDINT(MB_ReadData[1]);\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.ReactiveEnergy_Resettable_Varh := (WORD_TO_UDINT(MB_ReadData[4])*65536)+WORD_TO_UDINT(MB_ReadData[5]);\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.CumulativeTotalReactivePower_Resettable_Varh := (WORD_TO_UDINT(MB_ReadData[8])*65536)+WORD_TO_UDINT(MB_ReadData[9]);\u0009\u0009\u0009\u000d\u000a\u0009\u0009\u0009\u0009State := 9;\u000d\u000a\u0009\u0009\u0009ELSIF MB_Error THEN\u000d\u000a\u0009\u0009\u0009\u0009State := 20;\u000d\u000a\u0009\u0009\u0009END_IF;\u000d\u000a\u0009\u0009\u000d\u000a\u00099:\u0009\u0009MB_ReadCmd.Fun := _MDB_READ_HOLDING_REGISTERS;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Step 5 - Read addresses 0x0260 to 0x0271\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadAdr := 608;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ 608 = 0x260\u000d\u000a\u0009\u0009\u0009MB_ReadCmd.ReadSize :=18;\u000d\u000a\u0009\u0009\u0009MB_ReadOption.TimeOut := 10;\u000d\u000a\u0009\u0009\u0009MB_Execute := TRUE;\u000d\u000a\u0009\u0009\u0009State := 10;\u000d\u000a\u0009\u0009\u000d\u000a\u000910:\u0009IF MB_Done THEN\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.ActiveEnergy_Resettable_kWh := (WORD_TO_UDINT(MB_ReadData[0])*65536)+WORD_TO_UDINT(MB_ReadData[1]);\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.ReactiveEnergy_Resettable_kVarh := (WORD_TO_UDINT(MB_ReadData[4])*65536)+WORD_TO_UDINT(MB_ReadData[5]);\u000d\u000a\u0009\u0009\u0009\u0009RcvDat.CumulativeTotalReactivePower_Resettable_kVarh := (WORD_TO_UDINT(MB_ReadData[8])*65536)+WORD_TO_UDINT(MB_ReadData[9]);\u0009\u000d\u000a\u0009\u0009\u0009\u0009\u000d\u000a\u0009\u0009\u0009\u0009IF Reset_ActiveEnergyValues AND (NOT Reset_ActiveEnergyValues_Done) THEN\u0009\u0009\/\/ If we have reset values request AND we have not performed the reset\u000d\u000a\u0009\u0009\u0009\u0009\u0009State := 11;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ then go and perform the reset.\u000d\u000a\u0009\u0009\u0009\u0009ELSE\u000d\u000a\u0009\u0009\u0009\u0009\u0009Active := TRUE;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ We have completed all Modbus reads\/writes, so set 'Active' TRUE\u000d\u000a\u0009\u0009\u0009\u0009\u0009CycleComplete := TRUE;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ We have completed all Modbus reads\/writes, so set 'CycleComplete' TRUE (for 1 cycle)\u000d\u000a\u0009\u0009\u0009\u0009\u0009State := 0;\u000d\u000a\u0009\u0009\u0009\u0009END_IF;\u000d\u000a\u0009\u0009\u0009\u0009\u000d\u000a\u0009\u0009\u0009ELSIF MB_Error THEN\u000d\u000a\u0009\u0009\u0009\u0009State := 20;\u000d\u000a\u0009\u0009\u0009END_IF;\u000d\u000a\u000d\u000a\u000911:\u0009MB_WriteCmd.Fun := _MDB_WRITE_SINGLE_REGISTER;\u000d\u000a\u0009\u0009\u0009MB_WriteCmd.WriteAdr := 16#FFFF;\u000d\u000a\u0009\u0009\u0009MB_WriteCmd.WriteSize := 1;\u000d\u000a\u0009\u0009\u0009MB_WriteData := 16#0300;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ Send command no. 03 (resets any active energy values that can be reset) to KM-N2\u000d\u000a\u0009\u0009\u0009MB_Reset_Execute := TRUE;\u000d\u000a\u0009\u0009\u0009State := 12;\u000d\u000a\u0009\u0009\u0009\u000d\u000a\u000912:\u0009IF MB_Write_Done THEN\u000d\u000a\u0009\u0009\u0009\u0009Reset_ActiveEnergyValues_Done := TRUE;\u000d\u000a\u0009\u0009\u0009\u0009Active := TRUE;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ We have completed all Modbus reads\/writes, so set 'Active' TRUE\u000d\u000a\u0009\u0009\u0009\u0009CycleComplete := TRUE;\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\/\/ We have completed all Modbus reads\/writes, so set 'CycleComplete' TRUE (for 1 cycle)\u000d\u000a\u0009\u0009\u0009\u0009State := 0;\u000d\u000a\u0009\u0009\u0009ELSIF MB_Write_Error THEN\u000d\u000a\u0009\u0009\u0009\u0009State := 20;\u000d\u000a\u0009\u0009\u0009END_IF;\u000d\u000a\u0009\u0009\u000d\u000a\u000920:\u0009Active := FALSE;\u000d\u000a\u0009\u0009\u0009Error := TRUE;\u000d\u000a\u0009\u0009\u0009State := 0;\u000d\u000a\u000d\u000aEND_CASE;\u0009","W":1248}],"CMT":"\u000d\u000aFunction block to:\u000d\u000a    1. Read data from KM-N2 energy monitor\u000d\u000a    2. Perform reset of any active energy values on demand\u000d\u000avia Modbus RTU commands with NX-CIF105 \/ NX1W-CIF11\/12\u000d\u000a","LRI":1,"RRI":2,"VLs":[]}
{"CLs":[{"__type":"LD","Var":"Busy"},{"__type":"LD","Ix":9,"Var":"P_First_Run","X":1},{"__type":"LD","Ix":10,"Var":"Busy","X":2},{"__type":"LD","Id":"378c2a9c-af7b-4796-9e2a-98a800000007","Ix":1,"Up":true,"Var":"Busy","X":1,"Y":1},{"__type":"LD","Ix":11,"Var":"inst_ClearBuffers.Done","X":1,"Y":2},{"__type":"LD","Ix":2,"Var":"MB_OK_To_Execute","X":1,"Y":3},{"__type":"LD","Ix":3,"Not":true,"Var":"MB_Error","X":2,"Y":3},{"__type":"LD","Ix":4,"Not":true,"Var":"MB_Write_Error","X":3,"Y":3},{"__type":"HL","X":3},{"__type":"HL","X":2,"Y":1},{"__type":"HL","X":3,"Y":1},{"__type":"HL","X":2,"Y":2},{"__type":"HL","X":3,"Y":2},{"__type":"ST","Ix":12,"Var":"MB_OK_To_Execute","X":4},{"__type":"LD","Ix":5,"Not":true,"Var":"MB_Busy","X":1,"Y":4},{"__type":"LD","Ix":6,"Not":true,"Var":"MB_Write_Busy","X":2,"Y":4},{"__type":"LD","Ix":7,"Not":true,"Var":"ClearBuffers_Error","X":3,"Y":4},{"__type":"FB","In":[{"__type":"PF","Arg":"In"},{"__type":"PRM","Arg":"PT","Ix":13,"Type":"TIME","Var":"T#1000ms"}],"Ix":21,"Name":"TON","Out":[{"__type":"PF","Arg":"Q"},{"__type":"PRM","Arg":"ET","Ix":14,"Type":"TIME","Var":""}],"X":4,"Y":4,"Var":"inst_MB_DelayBeforeRetryTimer"},{"__type":"LD","Ix":8,"Var":"inst_MB_DelayBeforeRetryTimer.Q","X":3,"Y":5},{"__type":"FB","In":[{"__type":"PF","Arg":"Execute"},{"__type":"PRM","Arg":"DevicePort","Ix":15,"Type":"ANY","Var":"PortDetails"},{"__type":"PRM","Arg":"BufKind","Ix":16,"Type":"_eSERIAL_BUF_KIND","Var":"_eSERIAL_BUF_KIND#_BUF_SENDRCV"},{"__type":"PRM","Arg":"TimeOut","Ix":17,"Type":"UINT","Var":"10"}],"Ix":22,"Name":"NX_SerialBufClear","Out":[{"__type":"PF","Arg":"Done"},{"__type":"PRM","Arg":"Busy","Ix":18,"Type":"BOOL","Var":"ClearBuffers_Busy"},{"__type":"PRM","Arg":"Error","Ix":19,"Type":"BOOL","Var":"ClearBuffers_Error"},{"__type":"PRM","Arg":"ErrorID","Ix":20,"Type":"WORD","Var":"ClearBuffers_ErrorID"}],"X":4,"Y":5,"Var":"inst_ClearBuffers"}],"LRI":23,"RRI":24,"VLs":[{"Ix":25,"X":1},{"Ix":25,"X":1,"Y":1},{"Ix":25,"X":1,"Y":2},{"Ix":25,"X":1,"Y":3},{"Ix":26,"X":4},{"Ix":26,"X":4,"Y":1},{"Ix":26,"X":4,"Y":2},{"Ix":27,"X":3,"Y":4}]}
{"CLs":[{"__type":"LD","Var":"MB_OK_To_Execute"},{"__type":"LD","Ix":4,"Var":"MB_Execute","X":1},{"__type":"LD","Ix":1,"Not":true,"Var":"MB_Busy","X":2},{"__type":"LD","Ix":2,"Not":true,"Var":"MB_Done","X":3},{"__type":"LD","Ix":3,"Not":true,"Var":"MB_Error","X":4},{"__type":"FB","In":[{"__type":"PF","Arg":"Execute"},{"__type":"PRM","Arg":"DevicePort","Ix":6,"Type":"ANY","Var":"PortDetails"},{"__type":"PRM","Arg":"SlaveAdr","Ix":7,"Type":"UINT","Var":"SlaveAddress"},{"__type":"PRM","Arg":"ReadCmd","Ix":8,"Type":"_sSERIAL_MODBUSRTU_READ","Var":"MB_ReadCmd"},{"__type":"PRM","Arg":"ReadDat","IO":true,"Ix":9,"Type":"ANY","Var":"MB_ReadData"},{"__type":"PRM","Arg":"Option","Ix":10,"Type":"_sSERIAL_MODBUSRTU_OPTION","Var":"MB_ReadOption"},{"__type":"PRM","Arg":"Abort","Ix":11,"Type":"BOOL","Var":""}],"Ix":19,"Name":"NX_ModbusRtuRead","Out":[{"__type":"PF","Arg":"Done"},{"__type":"PRM","Arg":"Busy","Ix":12,"Type":"BOOL","Var":"MB_Busy"},{"__type":"PRM","Arg":"CommandAborted","Ix":13,"Type":"BOOL","Var":"MB_Aborted"},{"__type":"PRM","Arg":"Error","Ix":14,"Type":"BOOL","Var":"MB_Error"},{"__type":"PRM","Arg":"ReadDat","IO":true,"Ix":15,"Type":"ANY","Var":"MB_ReadData"},{"__type":"PRM","Arg":"ErrorID","Ix":16,"Type":"WORD","Var":"MB_ErrorID"},{"__type":"PRM","Arg":"ErrorIDEx","Ix":17,"Type":"DWORD","Var":"MB_ErrorIDEx"},{"__type":"PRM","Arg":"ReadSize","Ix":18,"Type":"UINT","Var":"MB_ReadSize"}],"X":5,"Var":"inst_MB_Read"},{"__type":"ST","Ix":5,"Var":"MB_Done","X":6}],"LRI":20,"RRI":21,"VLs":[]}
{"CLs":[{"__type":"LD","Var":"MB_OK_To_Execute"},{"__type":"LD","Ix":1,"Var":"MB_Reset_Execute","X":1},{"__type":"FB","In":[{"__type":"PF","Arg":"Execute"},{"__type":"PRM","Arg":"DevicePort","Ix":3,"Type":"ANY","Var":"PortDetails"},{"__type":"PRM","Arg":"SlaveAdr","Ix":4,"Type":"UINT","Var":"SlaveAddress"},{"__type":"PRM","Arg":"WriteCmd","Ix":5,"Type":"_sSERIAL_MODBUSRTU_WRITE","Var":"MB_WriteCmd"},{"__type":"PRM","Arg":"WriteDat","Ix":6,"Type":"ANY","Var":"MB_WriteData"},{"__type":"PRM","Arg":"Option","Ix":7,"Type":"_sSERIAL_MODBUSRTU_OPTION","Var":""},{"__type":"PRM","Arg":"Abort","Ix":8,"Type":"BOOL","Var":""}],"Ix":14,"Name":"NX_ModbusRtuWrite","Out":[{"__type":"PF","Arg":"Done"},{"__type":"PRM","Arg":"Busy","Ix":9,"Type":"BOOL","Var":"MB_Write_Busy"},{"__type":"PRM","Arg":"CommandAborted","Ix":10,"Type":"BOOL","Var":"MB_Write_Aborted"},{"__type":"PRM","Arg":"Error","Ix":11,"Type":"BOOL","Var":"MB_Write_Error"},{"__type":"PRM","Arg":"ErrorID","Ix":12,"Type":"WORD","Var":"MB_Write_ErrorID"},{"__type":"PRM","Arg":"ErrorIDEx","Ix":13,"Type":"DWORD","Var":"MB_Write_ErrorIDEx"}],"X":2,"Var":"inst_MB_Write"},{"__type":"ST","Ix":2,"Var":"MB_Write_Done","X":3}],"LRI":15,"RRI":16,"VLs":[]}
